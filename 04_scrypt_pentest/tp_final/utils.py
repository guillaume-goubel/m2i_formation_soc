# import nmap
# import vulners

# import os
# from dotenv import load_dotenv

# # Charger les variables d'environnement à partir du fichier .env
# load_dotenv()

# # -------- Scanning --------

# def scan_network(network_range):
    
#     # Initialiser le scanner nmap
#     nmap_scanner = nmap.PortScanner()

#     # Effectuer le scan avec la résolution des noms d'hôte
#     print(f"Scanning network range {network_range}...")
#     nmap_scanner.scan(hosts=network_range, arguments='-sP -R')

#     hosts_info = []

#     for host in nmap_scanner.all_hosts():
#         host_info = {}
#         host_info['ip'] = host
#         host_info['state'] = nmap_scanner[host].state()

#         # Récupérer le nom d'hôte (s'il existe)
#         if 'hostnames' in nmap_scanner[host]:
#             hostnames = nmap_scanner[host]['hostnames']
#             if hostnames:
#                 host_info['hostname'] = hostnames[0]['name']
#             else:
#                 host_info['hostname'] = 'N/A'
#         else:
#             host_info['hostname'] = 'N/A'

#         # Récupérer les adresses MAC (s'il existe)
#         if 'addresses' in nmap_scanner[host] and 'mac' in nmap_scanner[host]['addresses']:
#             host_info['mac'] = nmap_scanner[host]['addresses']['mac']
#         else:
#             host_info['mac'] = 'N/A'

#         # Récupérer la liste des ports ouverts
#         # host_info['open_ports'] = []
#         # for proto in nmap_scanner[host].all_protocols():
#         #     lport = nmap_scanner[host][proto].keys()
#         #     for port in lport:
#         #         if nmap_scanner[host][proto][port]['state'] == 'open':
#         #             host_info['open_ports'].append(port)

#         hosts_info.append(host_info)

#     return hosts_info

# def initial_scan(target):
#     scanner = nmap.PortScanner()
#     scanner.scan(target, arguments='-p-')  # Scanne tous les ports
#     for host in scanner.all_hosts():
#         print(f"Host : {host} ({scanner[host].hostname()})")
#         print(f"State : {scanner[host].state()}")
#         for proto in scanner[host].all_protocols():
#             print(f"Protocol : {proto}")
#             ports = scanner[host][proto].keys()
#             for port in ports:
#                 print(f"Port : {port}\tStatus : {scanner[host][proto][port]['state']}")

# def identify_services(target):
#     scanner = nmap.PortScanner()
#     scanner.scan(target, arguments='-sV')  # Scanne les versions des services
#     for host in scanner.all_hosts():
#         print(f"Host : {host} ({scanner[host].hostname()})")
#         for proto in scanner[host].all_protocols():
#             print(f"Protocol : {proto}")
#             ports = scanner[host][proto].keys()
#             for port in ports:
#                 service = scanner[host][proto][port]
#                 print(f"Port : {port}\tService : {service['name']}\tVersion : {service.get('version', 'Unknown')}")

# def detect_technologies(target):
#     scanner = nmap.PortScanner()
#     scanner.scan(target, arguments='-sV --script http-headers,banner')  # Utilise les scripts de bannière et d'en-têtes HTTP
#     for host in scanner.all_hosts():
#         print(f"Host : {host} ({scanner[host].hostname()})")
#         for proto in scanner[host].all_protocols():
#             print(f"Protocol : {proto}")
#             ports = scanner[host][proto].keys()
#             for port in ports:
#                 service = scanner[host][proto][port]
#                 print(f"Port : {port}\tState : {service['state']}\tService : {service['name']}\tVersion : {service.get('version', 'Unknown')}")
#                 if 'script' in service:
#                     print("Technology Details :")
#                     for key, value in service['script'].items():
#                         print(f"  {key} :")
#                         # Afficher chaque ligne du texte de la valeur pour une meilleure lisibilité
#                         if isinstance(value, str):
#                             for line in value.splitlines():
#                                 print(f"    {line}")
#                         else:
#                             print(f"    {value}")
#                     # Rechercher des indices de reverse-proxy dans les en-têtes HTTP
#                     if 'http-headers' in service['script']:
#                         headers = service['script']['http-headers']
#                         if any(h in headers for h in ['X-Forwarded-For', 'X-Real-IP', 'Via']):
#                             print("Possible Reverse-Proxy Detected")

# def scanning(ip, all_network=False):
    
#     if all_network:
#         return scan_network(ip)
#     else:
#         # initial_scan(ip)
#         # identify_services(ip)
#         detect_technologies(ip)
#         return True
    
import subprocess
import os

# Chemin vers dirsearch.py
DIRSEARCH_PATH = "/Users/Administrateur/dirsearch"  # Remplacez par le chemin correct
WORDLIST_PATH = "/Users/Administrateur/Desktop/directory-list-1.0.txt"  # Remplacez par le chemin de votre fichier de dictionnaire
OUTPUT_FILE = "documentation.md"
TARGET_URL = "http://10.125.26.56:8080:op"  # Remplacez par l'URL de votre application

def run_dirsearch(target_url, wordlist_path):
    
    # try:
    result = subprocess.run(
        ["python3", DIRSEARCH_PATH, "-u", target_url, "-w", wordlist_path, "-r", "-e", "php,html,js,css"],
        capture_output=True,
        text=True,
    )
    print(result.stdout)
    return result.stdout
    # except Exception as e:
    #     print(f"Error running dirsearch: {e}")
    #     return ""

def parse_dirsearch_output(output):
    urls = []
    for line in output.splitlines():
        if line.startswith("[") and "200" in line:
            parts = line.split()
            url = parts[-1]
            urls.append(url)
    return urls

def generate_documentation(urls):
    with open(OUTPUT_FILE, "w") as file:
        file.write("# Application Architecture Documentation\n\n")
        file.write(f"Base URL: {TARGET_URL}\n\n")
        file.write("## Discovered URLs\n\n")
        for url in urls:
            file.write(f"- {url}\n")

def main():
    print("Running dirsearch...")
    output = run_dirsearch(TARGET_URL, WORDLIST_PATH)
    # print("Parsing dirsearch output...")
    # urls = parse_dirsearch_output(output)
    # print("Generating documentation...")
    # generate_documentation(urls)
    # print(f"Documentation generated: {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
