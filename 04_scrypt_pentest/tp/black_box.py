import nmap
import vulners

import os
from dotenv import load_dotenv

# Charger les variables d'environnement à partir du fichier .env
load_dotenv()

# ------ Scanning --------

def scan_network():
    network_range = '10.125.26.0/24'  # Remplacez par la plage de votre réseau

    # Initialiser le scanner nmap
    nmap_scanner = nmap.PortScanner()

    # Effectuer le scan avec la résolution des noms d'hôte
    print(f"Scanning network range {network_range}...")
    nmap_scanner.scan(hosts=network_range, arguments='-sP -R')

    hosts_info = []

    for host in nmap_scanner.all_hosts():
        host_info = {}
        host_info['ip'] = host
        host_info['state'] = nmap_scanner[host].state()

        # Récupérer le nom d'hôte (s'il existe)
        if 'hostnames' in nmap_scanner[host]:
            hostnames = nmap_scanner[host]['hostnames']
            if hostnames:
                host_info['hostname'] = hostnames[0]['name']
            else:
                host_info['hostname'] = 'N/A'
        else:
            host_info['hostname'] = 'N/A'

        # Récupérer les adresses MAC (s'il existe)
        if 'addresses' in nmap_scanner[host] and 'mac' in nmap_scanner[host]['addresses']:
            host_info['mac'] = nmap_scanner[host]['addresses']['mac']
        else:
            host_info['mac'] = 'N/A'

        # Récupérer la liste des ports ouverts
        # host_info['open_ports'] = []
        # for proto in nmap_scanner[host].all_protocols():
        #     lport = nmap_scanner[host][proto].keys()
        #     for port in lport:
        #         if nmap_scanner[host][proto][port]['state'] == 'open':
        #             host_info['open_ports'].append(port)

        hosts_info.append(host_info)

    return hosts_info

def service_scanner():
    nmap_scanner = nmap.PortScanner()
    host = "10.125.26.56"
    nmap_scanner.scan(host,arguments='-sV')
    for protocol in nmap_scanner[host].all_protocols():
        liste_ports = nmap_scanner[host][protocol].keys()
        for port in liste_ports:
            service_info = nmap_scanner[host][protocol][port]
            print(f"Port : {port}/{protocol}")
            print(f"Service : {service_info['name']}")
            print(f"Version du Service : {service_info['product']}, {service_info['version']}")

def scanning():
    
    # SCANNING NETWORK ----------------------------------
    # scan_results = scan_network()
    # print("Scan results:")
    # for host_info in scan_results:
    #     print(f"IP: {host_info['ip']}, MAC: {host_info['mac']}, Hostname: {host_info['hostname']}, State: {host_info['state']}")

    # SCANNING SERVICES ----------------------------------
    service_scanner()

# ------ Vulnerabilies --------

vulners_secret_key = os.getenv('VULNERS_SECRET_KEY')
vulners_api = vulners.VulnersApi(api_key=vulners_secret_key)

def nmap_scan(target_ip, ports='80, 135 ,139 ,445 ,3000 ,3389 ,5357 ,8080 ,3306'):
    scanner = nmap.PortScanner()
    scanner.scan(target_ip, ports, arguments='-sV')
    return scanner

def check_vulnerabilities(nmap_scanner):
    print("Scan on progress : ......")
    for host in nmap_scanner.all_hosts():
        for protocol in nmap_scanner[host].all_protocols():
            liste_ports = nmap_scanner[host][protocol].keys()
            for port in liste_ports:
                service_info = nmap_scanner[host][protocol][port]
                print(f"Port : {port}/{protocol}")
                print(f"Service : {service_info['name']}")
                print(f"Version du Service : {service_info['product']}, {service_info['version']}")
                if service_info['product'] and service_info['version']:
                    query = f"{service_info['product']} {service_info['version']}"
                    result_analys = vulners_api.find_all(query=query)
                    for vulnerability in result_analys:
                        print(f"{vulnerability['id']}  {vulnerability['title']}")

def vulnerabilities():
    target = "10.125.26.56"
    scanner = nmap_scan(target_ip=target)
    check_vulnerabilities(scanner)

# ------ Launch --------

# scanning()
vulnerabilities()
   