

# ------------------------------- SOCKET -------------------------------
# import socket
# from ipaddress import ip_address
# from concurrent.futures import ThreadPoolExecutor

# def scan_port(ip, port):
    
#     print(ip)
#     print(port)

#     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     result = sock.connect_ex((str(ip), port))

#     print(result)

#     if result == '0':
#         print(f'port {port} ouvert')
#     else:
#         print(f'port {port} ferm√©')
#     sock.close()

# def main():
    
#     start_ip = ip_address('172.27.159.187')
#     end_ip = ip_address('172.27.159.255')
#     target_ip = start_ip

#     start_port = 80
#     end_port = 83

#     with ThreadPoolExecutor(max_workers=100) as executor:
#         while target_ip <= end_ip:

#             for port in range(start_port, end_port + 1):
#                 executor.submit(scan_port, target_ip, port)
#                 # scan_port(target_ip, port)
#             target_ip += 1

# main()


# ------------------------------- SCAPY -------------------------------
from scapy.all import ARP, Ether, srp

def discover_network(network):

    #creation des paquets ARP
    arp_request = ARP(pdst=network)
    ether_frame = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether_frame/arp_request

    result = srp(packet, timeout=1, verbose= 1)[0]

    devices = []
    for sent, received in result:
        devices.append(f"IP {received.psrc}, MAC: {received.hwsrc}")
    return devices

def main():
    network = "10.125.26.0/24"
    hosts = discover_network(network)
    print(hosts)

main()