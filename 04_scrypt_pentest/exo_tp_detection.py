# # ------------------------------- SCAPY -------------------------------
from scapy.all import ARP, Ether, srp

def discover_network(network):
    # Creation des paquets ARP
    arp_request = ARP(pdst=network)
    ether_frame = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether_frame/arp_request

    result = srp(packet, timeout=1, verbose=0)[0]

    ip_mac_dict = {}
    duplicates = []

    for sent, received in result:
        ip = received.psrc
        mac = received.hwsrc

        if ip in ip_mac_dict:
            if ip_mac_dict[ip] != mac:
                duplicates.append((ip, ip_mac_dict[ip], mac))
        else:
            ip_mac_dict[ip] = mac

    # Liste ordonnée des couples IP/MAC
    devices_list = sorted(ip_mac_dict.items(), key=lambda x: x[0])

    return devices_list, duplicates

def main():

    network = "10.125.26.0/24"
    hosts, duplicates = discover_network(network)

    print(f"Hosts: ------------------------- \n")
    for ip, mac in hosts:
        print(f"IP: {ip}, MAC: {mac}")

    if duplicates:
        print("Duplicate IPs with different MACs found:\n")
        for ip, mac1, mac2 in duplicates:
            print(f"IP: {ip} has multiple MACs: {mac1} and {mac2}")
    else:
        print("No duplicate IPs with different MACs found ------------------------- \n")

if __name__ == "__main__":
    main()

# from scapy.all import sniff

# # Fonction de rappel appelée pour chaque paquet capturé
# def packet_callback(packet):
#     print(packet.summary())

# # Démarrer le sniffing
# sniff(prn=packet_callback, count=10)